== How to configure and start guzz? ==

 The startup of guzz is to initialize the GuzzContext, and hold its reference. The GuzzContext is the API gate to guzz's full functions.

=== Standalone Application:===

Create guzz's core configuration file--guzz.xml, and save it under the directory of the classpath.

{{{
import org.guzz.Configuration;
import org.guzz.GuzzContext;

GuzzContext gc = new Configuration("classpath:guzz.xml").newGuzzContext() ;
//perform you actions......
//.....
//shutting it down when you application exit.
gc.shutdown() ;
}}}

=== Web Application: ===

Create guzz's core configuration file--guzz.xml, and save it under the directory of the "/WEB-INF/".

Add the following code to web.xml:

{{{
<context-param>
   <param-name>guzzConfigLocation</param-name>
   <param-value>/WEB-INF/guzz.xml</param-value>
</context-param>

<listener>
   <listener-class>
      org.guzz.web.context.ContextLoaderListener
   </listener-class>
</listener>
}}}

then, guzz is ready for you.

You can use guzz's database taglib in jsp pages or fetch GuzzContext to do more.

{{{

import org.guzz.web.context.GuzzWebApplicationContextUtil;
import org.guzz.GuzzContext;

GuzzContext gc = GuzzWebApplicationContextUtil.getGuzzContext(session.getServletContext()) ;
}}}

 GuzzContext will be shutdown when the web-app quits.

=== Web Application with Spring IOC support: ===

 * 1. Create guzz's core configuration file--guzz.xml, and save it under the directory of the "/WEB-INF/".

 * 2. Replace spring's ContextLoader with guzz's in the web.xml. For example:

Replace

{{{
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
}}}

with guzz's ContextLoader for springframework:

{{{
<listener>
      <listener-class>org.guzz.web.context.spring.GuzzWithSpringContextLoaderListener</listener-class>
</listener>
}}}

 * 3. Add GuzzContext as a spring bean(the bean name must be "guzzContext") into spring's applicationContext.xml file：

{{{
<bean id="guzzContext" class="org.guzz.web.context.spring.GuzzContextBeanFactory" factory-method="createGuzzContext">
    <constructor-arg><value>/WEB-INF/guzz.xml</value></constructor-arg>
</bean>
}}}

Most of the time, you should add another "BaseDao" bean for making up your own Dao or Managers. (Take it as hibernate's sessionFactory.getHibernateTemplate())

{{{
<bean id="abstractGuzzDao" class="org.guzz.dao.GuzzBaseDao" abstract="true">
     <property name="guzzContext" ref="guzzContext" />
</bean>
}}}

 * 4. Now, guzz will work with spring IOC. You can fetch guzzContext through the spring bean or GuzzWebApplicationContextUtil as above。
 