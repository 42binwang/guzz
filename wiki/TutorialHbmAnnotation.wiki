== Guzz JPA Annotation ==

Guzz支持JPA定义的注解，并参照hibernate进行了注解扩展，以满足guzz特性功能的声明需要。

对于JPA自身的注解，使用方式与JPA规范规定的相同；对于扩展的注解，命名和使用方式与hibernate相同（除了包名不一样，其他几乎无差别）。

Guzz仅支持单对象ORM映射，不支持对象之间的关联映射（one-one, one-many, many-to, many-many），也不支持JPA的持久化方法。guzz annotation仅用来替代hbm.xml配置文件。

== 声明annotation ==

在guzz中一般需要在POJO中声明最少2个annotation：@javax.persistence.Entity和@org.guzz.annotations.Entity。

前者为JPA规范要求，后者用于声明对象的businessName，用于编程时按名称引用。

*一个典型域对象ORM定义如下：*

{{{
@javax.persistence.Entity
@org.guzz.annotations.Entity(businessName = "comment")
@Table(name="TB_COMMENT", shadow = CommentShadowView.class)
@TableGenerator(
		name = "commentGen",
		table="tb_id",
		catalog="somelog",
		schema="some_schema",
		pkColumnName="pk",
		pkColumnValue="2",
		valueColumnName="id_count",
		initialValue=100,
		allocationSize=20
		/*
		 * create table tb_id(pk int(11) primary key, id_count int(11) default 0)
		 * insert into tb_id(pk, id_count) values(2, 100)
		 */
)
public class Comment {

	@javax.persistence.Id
	@GeneratedValue(generator="commentGen", strategy=GenerationType.TABLE)
	private int id ;
	
	private int userId ;
	
	private String userName ;
	
	//@javax.persistence.Basic(fetch=FetchType.LAZY)
	@Column(name="DESCRIPTION")
	private String content ;
	
	private Date createdTime ;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public Date getCreatedTime() {
		return createdTime;
	}

	public void setCreatedTime(Date createdTime) {
		this.createdTime = createdTime;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public int getUserId() {
		return userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}
	
}
}}}

*注意：* 每个域对象都必须包含一个主键，通过@javax.persistence.Id声明。同时guzz将按照主键声明在变量上还是getXxx方法上决定按照field还是property构造映射属性。

Guzz支持的JPA Annotation，以及Guzz自身扩展的Annotation的详细使用说明，请参看[AppendJPAAnnotation Guzz JPA Annotation完全参考手册]。

== 配置annotated的领域对象到系统中 ==

对于hbm.xml的配置文件，通过guzz.xml中配置：

{{{
<business name="user" dbgroup="default" class="org.guzz.test.User" interpret="" file="classpath:org/guzz/test/User.hbm.xml" />
<business name="book" class="org.guzz.test.Book" file="classpath:org/guzz/test/Book.hbm.xml" />
}}}

来声明。

同样的道理，对于annotated的领域对象，也需要在guzz.xml主配置文件中进行声明。声明的标签为：a-business。

每个a-business标签对应1个领域对象。a-business拥有3个属性：

|| *属性名* || *Required* || *作用* ||
|| class || Required || annotated领域对象的类全名称（fully qualified class name） ||
|| name || Optional  || business name。如果填写，则覆盖注解中的businessName ||
|| dbgroup || Optional || 对象存储到的数据库组。如果填写，则覆盖注解中的dbGroup ||

*一个典型的配置如下：*
{{{
        <a-business name="user" dbgroup="default" class="org.guzz.test.User"/>
	<a-business name="book" class="org.guzz.test.Book" />
	<a-business name="userInfo" dbgroup="oracle" class="org.guzz.test.UserInfo" />
	<a-business name="userInfo2" dbgroup="default" class="org.guzz.test.UserInfoH2" />
	<a-business name="comment" dbgroup="default" class="org.guzz.test.Comment"/>
	<a-business name="cargo" class="org.guzz.test.shop.Cargo" />
	<a-business name="sp" class="org.guzz.test.shop.SpecialProperty" />
}}}

其中，每个领域对象的定义可以在guzz测试源代码中找到。